{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apisUrl = 'http://localhost:3456'; // URL to web api http://localhost:3456/stocks\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET stocks from the server */\n  getStocks() {\n    const url = `${this.apisUrl}/stocks`;\n    return this.http.get(url).pipe(map(response => {\n      if (response.status == 1) return response.data.stocks;\n    }), tap(_ => this.log('fetched stocks')), catchError(this.handleError('getHeroes', [])));\n  }\n  getWatchList() {\n    const url = `${this.apisUrl}/watch-list`;\n    return this.http.get(url).pipe(map(response => {\n      if (response.status == 1) return response.data.stocks;\n    }), tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    //this.messageService.add(`HeroService: ${message}`);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});\nexport { ApiService };","map":{"version":3,"names":["HttpHeaders","of","catchError","map","tap","ApiService","constructor","http","apisUrl","httpOptions","headers","getStocks","url","get","pipe","response","status","data","stocks","_","log","handleError","getWatchList","operation","result","error","console","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\shali\\Downloads\\task-angular updated\\task-angular updated\\src\\app\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Stock } from './stock';\n\n\n\n@Injectable({ providedIn: 'root' })\nexport class ApiService {\n\n  private apisUrl = 'http://localhost:3456';  // URL to web api http://localhost:3456/stocks\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient\n    ) { }\n\n  /** GET stocks from the server */\n  getStocks(): Observable<Stock[]> {\n    const url = `${this.apisUrl}/stocks`;\n    return this.http.get<Stock[]>(url)\n      .pipe(\n        map((response: any) => {\n          if(response.status==1)\n          return response.data.stocks;\n        }),\n        tap(_ => this.log('fetched stocks')),\n        catchError(this.handleError<Stock[]>('getHeroes', []))\n      );\n  }\n\n  getWatchList(): Observable<Stock[]> {\n    const url = `${this.apisUrl}/watch-list`;\n    return this.http.get<Stock[]>(url)\n      .pipe(\n        map((response: any) => {\n          if(response.status==1)\n          return response.data.stocks;\n        }),\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Stock[]>('getHeroes', []))\n      );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    //this.messageService.add(`HeroService: ${message}`);\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAEC,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;;;AAMrD,MACaC,UAAU;EAQrBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPN,KAAAC,OAAO,GAAG,uBAAuB,CAAC,CAAE;IAE5C,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIV,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAIK;EAEN;EACAW,SAASA,CAAA;IACP,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,OAAO,SAAS;IACpC,OAAO,IAAI,CAACD,IAAI,CAACM,GAAG,CAAUD,GAAG,CAAC,CAC/BE,IAAI,CACHX,GAAG,CAAEY,QAAa,IAAI;MACpB,IAAGA,QAAQ,CAACC,MAAM,IAAE,CAAC,EACrB,OAAOD,QAAQ,CAACE,IAAI,CAACC,MAAM;IAC7B,CAAC,CAAC,EACFd,GAAG,CAACe,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACpClB,UAAU,CAAC,IAAI,CAACmB,WAAW,CAAU,WAAW,EAAE,EAAE,CAAC,CAAC,CACvD;EACL;EAEAC,YAAYA,CAAA;IACV,MAAMV,GAAG,GAAG,GAAG,IAAI,CAACJ,OAAO,aAAa;IACxC,OAAO,IAAI,CAACD,IAAI,CAACM,GAAG,CAAUD,GAAG,CAAC,CAC/BE,IAAI,CACHX,GAAG,CAAEY,QAAa,IAAI;MACpB,IAAGA,QAAQ,CAACC,MAAM,IAAE,CAAC,EACrB,OAAOD,QAAQ,CAACE,IAAI,CAACC,MAAM;IAC7B,CAAC,CAAC,EACFd,GAAG,CAACe,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACpClB,UAAU,CAAC,IAAI,CAACmB,WAAW,CAAU,WAAW,EAAE,EAAE,CAAC,CAAC,CACvD;EACL;EAEA;;;;;;;EAOQA,WAAWA,CAAIE,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACL,GAAG,CAAC,GAAGG,SAAS,YAAYE,KAAK,CAACE,OAAO,EAAE,CAAC;MAEjD;MACA,OAAO1B,EAAE,CAACuB,MAAW,CAAC;IACxB,CAAC;EACH;EAEA;EACQJ,GAAGA,CAACO,OAAe;IACzB;EAAA;;AA9DStB,UAAU,C;mBAAVA,UAAU,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAV1B,UAAU,C;SAAVA,UAAU;EAAA2B,OAAA,EAAV3B,UAAU,CAAA4B,IAAA;EAAAC,UAAA,EADG;AAAM;SACnB7B,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}